/*
* generated by Xtext
*/
package com.dawsonsystems.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.dawsonsystems.services.SwiftGrammarAccess;

public class SwiftParser extends AbstractContentAssistParser {
	
	@Inject
	private SwiftGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.dawsonsystems.contentassist.antlr.internal.InternalSwiftLexer createLexer(CharStream stream) {
		return new com.dawsonsystems.contentassist.antlr.internal.InternalSwiftLexer(stream);
	}
	
	@Override
	protected com.dawsonsystems.contentassist.antlr.internal.InternalSwiftParser createParser() {
		com.dawsonsystems.contentassist.antlr.internal.InternalSwiftParser result = new com.dawsonsystems.contentassist.antlr.internal.InternalSwiftParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getMessageAccess().getElementsAlternatives_0_0(), "rule__Message__ElementsAlternatives_0_0");
					put(grammarAccess.getLineAccess().getAlternatives_0(), "rule__Line__Alternatives_0");
					put(grammarAccess.getSimpleLineAccess().getAlternatives_1(), "rule__SimpleLine__Alternatives_1");
					put(grammarAccess.getSimpleLineAccess().getAlternatives_3(), "rule__SimpleLine__Alternatives_3");
					put(grammarAccess.getComplexLineAccess().getAlternatives_1(), "rule__ComplexLine__Alternatives_1");
					put(grammarAccess.getVmStatementAccess().getAlternatives(), "rule__VmStatement__Alternatives");
					put(grammarAccess.getComplexVmStatementAccess().getAlternatives_4(), "rule__ComplexVmStatement__Alternatives_4");
					put(grammarAccess.getComplexVmStatementAccess().getAlternatives_8(), "rule__ComplexVmStatement__Alternatives_8");
					put(grammarAccess.getVmEntryAccess().getAlternatives(), "rule__VmEntry__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getMessageAccess().getGroup(), "rule__Message__Group__0");
					put(grammarAccess.getComplexBeginningLineAccess().getGroup(), "rule__ComplexBeginningLine__Group__0");
					put(grammarAccess.getBeginningLineAccess().getGroup(), "rule__BeginningLine__Group__0");
					put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
					put(grammarAccess.getSimpleLineAccess().getGroup(), "rule__SimpleLine__Group__0");
					put(grammarAccess.getComplexLineAccess().getGroup(), "rule__ComplexLine__Group__0");
					put(grammarAccess.getComplexVmStatementAccess().getGroup(), "rule__ComplexVmStatement__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getStatementAccess().getGroup_3(), "rule__Statement__Group_3__0");
					put(grammarAccess.getMessageAccess().getElementsAssignment_0(), "rule__Message__ElementsAssignment_0");
					put(grammarAccess.getMessageAccess().getElementsAssignment_4(), "rule__Message__ElementsAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.dawsonsystems.contentassist.antlr.internal.InternalSwiftParser typedParser = (com.dawsonsystems.contentassist.antlr.internal.InternalSwiftParser) parser;
			typedParser.entryRuleMessage();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}
	
	public SwiftGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SwiftGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
