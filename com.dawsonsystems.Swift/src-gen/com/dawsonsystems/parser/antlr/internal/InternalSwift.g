/*
* generated by Xtext
*/
grammar InternalSwift;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.dawsonsystems.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.dawsonsystems.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import com.dawsonsystems.services.SwiftGrammarAccess;

}

@parser::members {
 
 	private SwiftGrammarAccess grammarAccess;
 	
    public InternalSwiftParser(TokenStream input, IAstFactory factory, SwiftGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("com/dawsonsystems/parser/antlr/internal/InternalSwift.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Message";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getMessageRule(), currentNode); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_elements_0=(	{ 
        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getElementsBeginningLineParserRuleCall_0_0_0(), currentNode); 
    }
	ruleBeginningLine	{ 
        currentNode = currentNode.getParent();
    }

    |	{ 
        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getElementsComplexBeginningLineParserRuleCall_0_0_1(), currentNode); 
    }
	ruleComplexBeginningLine	{ 
        currentNode = currentNode.getParent();
    }
)
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "elements", lv_elements_0, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)+'{' 
    {
        createLeafNode(grammarAccess.getMessageAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
RULE_STR
    { 
    createLeafNode(grammarAccess.getMessageAccess().getSTRTerminalRuleCall_2(), null); 
    }
':\n' 
    {
        createLeafNode(grammarAccess.getMessageAccess().getColonKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getElementsLineParserRuleCall_4_0(), currentNode); 
	    }
	    lv_elements_4=ruleLine 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "elements", lv_elements_4, "Line", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)+'-}' 
    {
        createLeafNode(grammarAccess.getMessageAccess().getHyphenMinusRightCurlyBracketKeyword_5(), null); 
    }
);





// Entry rule entryRuleComplexBeginningLine
entryRuleComplexBeginningLine returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getComplexBeginningLineRule(), currentNode); } 
	 iv_ruleComplexBeginningLine=ruleComplexBeginningLine 
	 { $current=$iv_ruleComplexBeginningLine.current.getText(); }  
	 EOF 
;

// Rule ComplexBeginningLine
ruleComplexBeginningLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='{' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexBeginningLineAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
    this_STR_1=RULE_STR    {
		$current.merge(this_STR_1);
    }

    { 
    createLeafNode(grammarAccess.getComplexBeginningLineAccess().getSTRTerminalRuleCall_1(), null); 
    }

	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexBeginningLineAccess().getColonKeyword_2(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getComplexBeginningLineAccess().getBeginningLineParserRuleCall_3(), currentNode); 
    }
    this_BeginningLine_3=ruleBeginningLine    {
		$current.merge(this_BeginningLine_3);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='}' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexBeginningLineAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuleBeginningLine
entryRuleBeginningLine returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBeginningLineRule(), currentNode); } 
	 iv_ruleBeginningLine=ruleBeginningLine 
	 { $current=$iv_ruleBeginningLine.current.getText(); }  
	 EOF 
;

// Rule BeginningLine
ruleBeginningLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='{' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBeginningLineAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
    this_STR_1=RULE_STR    {
		$current.merge(this_STR_1);
    }

    { 
    createLeafNode(grammarAccess.getBeginningLineAccess().getSTRTerminalRuleCall_1(), null); 
    }

	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBeginningLineAccess().getColonKeyword_2(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getBeginningLineAccess().getStatementParserRuleCall_3(), currentNode); 
    }
    this_Statement_3=ruleStatement    {
		$current.merge(this_Statement_3);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='}' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBeginningLineAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuleLine
entryRuleLine returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLineRule(), currentNode); } 
	 iv_ruleLine=ruleLine 
	 { $current=$iv_ruleLine.current.getText(); }  
	 EOF 
;

// Rule Line
ruleLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getLineAccess().getSimpleLineParserRuleCall_0_0(), currentNode); 
    }
    this_SimpleLine_0=ruleSimpleLine    {
		$current.merge(this_SimpleLine_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLineAccess().getComplexLineParserRuleCall_0_1(), currentNode); 
    }
    this_ComplexLine_1=ruleComplexLine    {
		$current.merge(this_ComplexLine_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLineAccess().getVmStatementParserRuleCall_0_2(), currentNode); 
    }
    this_VmStatement_2=ruleVmStatement    {
		$current.merge(this_VmStatement_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)(
	kw='\n' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLineAccess().getKeyword_1(), null); 
    }
)?)
    ;





// Entry rule entryRuleSimpleLine
entryRuleSimpleLine returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSimpleLineRule(), currentNode); } 
	 iv_ruleSimpleLine=ruleSimpleLine 
	 { $current=$iv_ruleSimpleLine.current.getText(); }  
	 EOF 
;

// Rule SimpleLine
ruleSimpleLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSimpleLineAccess().getColonKeyword_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleLineAccess().getVmEntryParserRuleCall_1_0(), currentNode); 
    }
    this_VmEntry_1=ruleVmEntry    {
		$current.merge(this_VmEntry_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_STR_2=RULE_STR    {
		$current.merge(this_STR_2);
    }

    { 
    createLeafNode(grammarAccess.getSimpleLineAccess().getSTRTerminalRuleCall_1_1(), null); 
    }
)
	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getSimpleLineAccess().getColonKeyword_2(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleLineAccess().getVmEntryParserRuleCall_3_0(), currentNode); 
    }
    this_VmEntry_4=ruleVmEntry    {
		$current.merge(this_VmEntry_4);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_STR_5=RULE_STR    {
		$current.merge(this_STR_5);
    }

    { 
    createLeafNode(grammarAccess.getSimpleLineAccess().getSTRTerminalRuleCall_3_1(), null); 
    }
))
    ;





// Entry rule entryRuleComplexLine
entryRuleComplexLine returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getComplexLineRule(), currentNode); } 
	 iv_ruleComplexLine=ruleComplexLine 
	 { $current=$iv_ruleComplexLine.current.getText(); }  
	 EOF 
;

// Rule ComplexLine
ruleComplexLine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw=':' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexLineAccess().getColonKeyword_0(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getComplexLineAccess().getVmEntryParserRuleCall_1_0(), currentNode); 
    }
    this_VmEntry_1=ruleVmEntry    {
		$current.merge(this_VmEntry_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_STR_2=RULE_STR    {
		$current.merge(this_STR_2);
    }

    { 
    createLeafNode(grammarAccess.getComplexLineAccess().getSTRTerminalRuleCall_1_1(), null); 
    }
)
	kw='::' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexLineAccess().getColonColonKeyword_2(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getComplexLineAccess().getStatementParserRuleCall_3(), currentNode); 
    }
    this_Statement_4=ruleStatement    {
		$current.merge(this_Statement_4);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexLineAccess().getSolidusKeyword_4(), null); 
    }
(
    { 
        currentNode=createCompositeNode(grammarAccess.getComplexLineAccess().getStatementParserRuleCall_5(), currentNode); 
    }
    this_Statement_6=ruleStatement    {
		$current.merge(this_Statement_6);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexLineAccess().getSolidusKeyword_6(), null); 
    }
)?(
    { 
        currentNode=createCompositeNode(grammarAccess.getComplexLineAccess().getStatementParserRuleCall_7(), currentNode); 
    }
    this_Statement_8=ruleStatement    {
		$current.merge(this_Statement_8);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexLineAccess().getSolidusKeyword_8(), null); 
    }
)?(
    { 
        currentNode=createCompositeNode(grammarAccess.getComplexLineAccess().getStatementParserRuleCall_9(), currentNode); 
    }
    this_Statement_10=ruleStatement    {
		$current.merge(this_Statement_10);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexLineAccess().getSolidusKeyword_10(), null); 
    }
)?(
    { 
        currentNode=createCompositeNode(grammarAccess.getComplexLineAccess().getStatementParserRuleCall_11(), currentNode); 
    }
    this_Statement_12=ruleStatement    {
		$current.merge(this_Statement_12);
    }

    { 
        currentNode = currentNode.getParent();
    }
)?)
    ;





// Entry rule entryRuleVmStatement
entryRuleVmStatement returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVmStatementRule(), currentNode); } 
	 iv_ruleVmStatement=ruleVmStatement 
	 { $current=$iv_ruleVmStatement.current.getText(); }  
	 EOF 
;

// Rule VmStatement
ruleVmStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_SimpleVmStatement_0=RULE_SIMPLEVMSTATEMENT    {
		$current.merge(this_SimpleVmStatement_0);
    }

    { 
    createLeafNode(grammarAccess.getVmStatementAccess().getSimpleVmStatementTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVmStatementAccess().getComplexVmStatementParserRuleCall_1(), currentNode); 
    }
    this_ComplexVmStatement_1=ruleComplexVmStatement    {
		$current.merge(this_ComplexVmStatement_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleComplexVmStatement
entryRuleComplexVmStatement returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getComplexVmStatementRule(), currentNode); } 
	 iv_ruleComplexVmStatement=ruleComplexVmStatement 
	 { $current=$iv_ruleComplexVmStatement.current.getText(); }  
	 EOF 
;

// Rule ComplexVmStatement
ruleComplexVmStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_SimpleVmStatement_0=RULE_SIMPLEVMSTATEMENT    {
		$current.merge(this_SimpleVmStatement_0);
    }

    { 
    createLeafNode(grammarAccess.getComplexVmStatementAccess().getSimpleVmStatementTerminalRuleCall_0(), null); 
    }
(    this_SPACE_1=RULE_SPACE    {
		$current.merge(this_SPACE_1);
    }

    { 
    createLeafNode(grammarAccess.getComplexVmStatementAccess().getSPACETerminalRuleCall_1(), null); 
    }
)?
	kw='(' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexVmStatementAccess().getLeftParenthesisKeyword_2(), null); 
    }
(    this_SPACE_3=RULE_SPACE    {
		$current.merge(this_SPACE_3);
    }

    { 
    createLeafNode(grammarAccess.getComplexVmStatementAccess().getSPACETerminalRuleCall_3(), null); 
    }
)?(
    { 
        currentNode=createCompositeNode(grammarAccess.getComplexVmStatementAccess().getVmEntryParserRuleCall_4_0(), currentNode); 
    }
    this_VmEntry_4=ruleVmEntry    {
		$current.merge(this_VmEntry_4);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_QUOTEDSTRING_5=RULE_QUOTEDSTRING    {
		$current.merge(this_QUOTEDSTRING_5);
    }

    { 
    createLeafNode(grammarAccess.getComplexVmStatementAccess().getQUOTEDSTRINGTerminalRuleCall_4_1(), null); 
    }
)(    this_SPACE_6=RULE_SPACE    {
		$current.merge(this_SPACE_6);
    }

    { 
    createLeafNode(grammarAccess.getComplexVmStatementAccess().getSPACETerminalRuleCall_5(), null); 
    }
)?(    this_SYMBOLS_7=RULE_SYMBOLS    {
		$current.merge(this_SYMBOLS_7);
    }

    { 
    createLeafNode(grammarAccess.getComplexVmStatementAccess().getSYMBOLSTerminalRuleCall_6(), null); 
    }
)?(    this_SPACE_8=RULE_SPACE    {
		$current.merge(this_SPACE_8);
    }

    { 
    createLeafNode(grammarAccess.getComplexVmStatementAccess().getSPACETerminalRuleCall_7(), null); 
    }
)?(
    { 
        currentNode=createCompositeNode(grammarAccess.getComplexVmStatementAccess().getVmEntryParserRuleCall_8_0(), currentNode); 
    }
    this_VmEntry_9=ruleVmEntry    {
		$current.merge(this_VmEntry_9);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |    this_QUOTEDSTRING_10=RULE_QUOTEDSTRING    {
		$current.merge(this_QUOTEDSTRING_10);
    }

    { 
    createLeafNode(grammarAccess.getComplexVmStatementAccess().getQUOTEDSTRINGTerminalRuleCall_8_1(), null); 
    }
)?(    this_SPACE_11=RULE_SPACE    {
		$current.merge(this_SPACE_11);
    }

    { 
    createLeafNode(grammarAccess.getComplexVmStatementAccess().getSPACETerminalRuleCall_9(), null); 
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getComplexVmStatementAccess().getRightParenthesisKeyword_10(), null); 
    }
)
    ;





// Entry rule entryRuleVmEntry
entryRuleVmEntry returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVmEntryRule(), currentNode); } 
	 iv_ruleVmEntry=ruleVmEntry 
	 { $current=$iv_ruleVmEntry.current.getText(); }  
	 EOF 
;

// Rule VmEntry
ruleVmEntry returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(    this_SimpleVmEntry_0=RULE_SIMPLEVMENTRY    {
		$current.merge(this_SimpleVmEntry_0);
    }

    { 
    createLeafNode(grammarAccess.getVmEntryAccess().getSimpleVmEntryTerminalRuleCall_0(), null); 
    }

    |    this_BracedVmEntry_1=RULE_BRACEDVMENTRY    {
		$current.merge(this_BracedVmEntry_1);
    }

    { 
    createLeafNode(grammarAccess.getVmEntryAccess().getBracedVmEntryTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleStatement
entryRuleStatement returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); } 
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current.getText(); }  
	 EOF 
;

// Rule Statement
ruleStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getVmEntryParserRuleCall_0(), currentNode); 
    }
    this_VmEntry_0=ruleVmEntry    {
		$current.merge(this_VmEntry_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |(
	kw='"' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getStatementAccess().getQuotationMarkKeyword_1_0(), null); 
    }
    this_STR_2=RULE_STR    {
		$current.merge(this_STR_2);
    }

    { 
    createLeafNode(grammarAccess.getStatementAccess().getSTRTerminalRuleCall_1_1(), null); 
    }

	kw='"' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getStatementAccess().getQuotationMarkKeyword_1_2(), null); 
    }
)
    |    this_STR_4=RULE_STR    {
		$current.merge(this_STR_4);
    }

    { 
    createLeafNode(grammarAccess.getStatementAccess().getSTRTerminalRuleCall_2(), null); 
    }

    |((    this_STR_5=RULE_STR    {
		$current.merge(this_STR_5);
    }

    { 
    createLeafNode(grammarAccess.getStatementAccess().getSTRTerminalRuleCall_3_0(), null); 
    }
)?    this_BracedVmEntry_6=RULE_BRACEDVMENTRY    {
		$current.merge(this_BracedVmEntry_6);
    }

    { 
    createLeafNode(grammarAccess.getStatementAccess().getBracedVmEntryTerminalRuleCall_3_1(), null); 
    }
(    this_STR_7=RULE_STR    {
		$current.merge(this_STR_7);
    }

    { 
    createLeafNode(grammarAccess.getStatementAccess().getSTRTerminalRuleCall_3_2(), null); 
    }
)?))*
    ;





RULE_QUOTEDSTRING : ('"'|'\'') .* ('"'|'\'');

RULE_STR : ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_SYMBOLS : ('='|'-'|'_'|'+'|'<'|'>'|'!')*;

RULE_SIMPLEVMENTRY : '$' RULE_STR;

RULE_SIMPLEVMSTATEMENT : '#' RULE_STR RULE_SPACE?;

RULE_BRACEDVMENTRY : '$' '{' RULE_STR '}';

RULE_SPACE : ' ';

RULE_ANY_OTHER : .;


