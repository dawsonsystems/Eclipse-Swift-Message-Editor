/*
* generated by Xtext
*/

package com.dawsonsystems.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;


@Singleton
public class SwiftGrammarAccess implements IGrammarAccess {
	
	
	public class MessageElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cElementsAlternatives_0_0 = (Alternatives)cElementsAssignment_0.eContents().get(0);
		private final RuleCall cElementsBeginningLineParserRuleCall_0_0_0 = (RuleCall)cElementsAlternatives_0_0.eContents().get(0);
		private final RuleCall cElementsComplexBeginningLineParserRuleCall_0_0_1 = (RuleCall)cElementsAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsLineParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Message:
		//  elements+=( BeginningLine | ComplexBeginningLine )+ "{" STR ":\n" elements+=Line+ "-}";
		public ParserRule getRule() { return rule; }

		//elements+=( BeginningLine | ComplexBeginningLine )+ "{" STR ":\n" elements+=Line+ "-}"
		public Group getGroup() { return cGroup; }

		//elements+=( BeginningLine | ComplexBeginningLine )+
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//BeginningLine|ComplexBeginningLine
		public Alternatives getElementsAlternatives_0_0() { return cElementsAlternatives_0_0; }

		//BeginningLine
		public RuleCall getElementsBeginningLineParserRuleCall_0_0_0() { return cElementsBeginningLineParserRuleCall_0_0_0; }

		//ComplexBeginningLine
		public RuleCall getElementsComplexBeginningLineParserRuleCall_0_0_1() { return cElementsComplexBeginningLineParserRuleCall_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//STR
		public RuleCall getSTRTerminalRuleCall_2() { return cSTRTerminalRuleCall_2; }

		//":\n"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//elements+=Line+
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//Line
		public RuleCall getElementsLineParserRuleCall_4_0() { return cElementsLineParserRuleCall_4_0; }

		//"-}"
		public Keyword getHyphenMinusRightCurlyBracketKeyword_5() { return cHyphenMinusRightCurlyBracketKeyword_5; }
	}

	public class ComplexBeginningLineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexBeginningLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBeginningLineParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComplexBeginningLine returns ecore::EString:
		//  "{" STR ":" BeginningLine "}";
		public ParserRule getRule() { return rule; }

		//"{" STR ":" BeginningLine "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//STR
		public RuleCall getSTRTerminalRuleCall_1() { return cSTRTerminalRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//BeginningLine
		public RuleCall getBeginningLineParserRuleCall_3() { return cBeginningLineParserRuleCall_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BeginningLineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BeginningLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BeginningLine returns ecore::EString:
		//  "{" STR ":" Statement "}";
		public ParserRule getRule() { return rule; }

		//"{" STR ":" Statement "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//STR
		public RuleCall getSTRTerminalRuleCall_1() { return cSTRTerminalRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//Statement
		public RuleCall getStatementParserRuleCall_3() { return cStatementParserRuleCall_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class LineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSimpleLineParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cComplexLineParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cVmStatementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Line returns ecore::EString:
		//  (SimpleLine|ComplexLine|VmStatement) "\n"?;
		public ParserRule getRule() { return rule; }

		//(SimpleLine|ComplexLine|VmStatement) "\n"?
		public Group getGroup() { return cGroup; }

		//SimpleLine|ComplexLine|VmStatement
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//SimpleLine
		public RuleCall getSimpleLineParserRuleCall_0_0() { return cSimpleLineParserRuleCall_0_0; }

		//ComplexLine
		public RuleCall getComplexLineParserRuleCall_0_1() { return cComplexLineParserRuleCall_0_1; }

		//VmStatement
		public RuleCall getVmStatementParserRuleCall_0_2() { return cVmStatementParserRuleCall_0_2; }

		//"\n"?
		public Keyword getKeyword_1() { return cKeyword_1; }
	}

	public class SimpleLineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cVmEntryParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTRTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cVmEntryParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cSTRTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//SimpleLine returns ecore::EString:
		//  ":" (VmEntry|STR) ":" (VmEntry|STR);
		public ParserRule getRule() { return rule; }

		//":" (VmEntry|STR) ":" (VmEntry|STR)
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//VmEntry|STR
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//VmEntry
		public RuleCall getVmEntryParserRuleCall_1_0() { return cVmEntryParserRuleCall_1_0; }

		//STR
		public RuleCall getSTRTerminalRuleCall_1_1() { return cSTRTerminalRuleCall_1_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//VmEntry|STR
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//VmEntry
		public RuleCall getVmEntryParserRuleCall_3_0() { return cVmEntryParserRuleCall_3_0; }

		//STR
		public RuleCall getSTRTerminalRuleCall_3_1() { return cSTRTerminalRuleCall_3_1; }
	}

	public class ComplexLineElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cVmEntryParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTRTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cStatementParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cSolidusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cStatementParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cSolidusKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cStatementParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cSolidusKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cStatementParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		//ComplexLine returns ecore::EString:
		//  ":" (VmEntry|STR) "::" Statement "/" Statement? "/"? Statement? "/"? Statement? "/"?
		//  Statement?;
		public ParserRule getRule() { return rule; }

		//":" (VmEntry|STR) "::" Statement "/" Statement? "/"? Statement? "/"? Statement? "/"?
		//Statement?
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//VmEntry|STR
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//VmEntry
		public RuleCall getVmEntryParserRuleCall_1_0() { return cVmEntryParserRuleCall_1_0; }

		//STR
		public RuleCall getSTRTerminalRuleCall_1_1() { return cSTRTerminalRuleCall_1_1; }

		//"::"
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }

		//Statement
		public RuleCall getStatementParserRuleCall_3() { return cStatementParserRuleCall_3; }

		//"/"
		public Keyword getSolidusKeyword_4() { return cSolidusKeyword_4; }

		//Statement?
		public RuleCall getStatementParserRuleCall_5() { return cStatementParserRuleCall_5; }

		//"/"?
		public Keyword getSolidusKeyword_6() { return cSolidusKeyword_6; }

		//Statement?
		public RuleCall getStatementParserRuleCall_7() { return cStatementParserRuleCall_7; }

		//"/"?
		public Keyword getSolidusKeyword_8() { return cSolidusKeyword_8; }

		//Statement?
		public RuleCall getStatementParserRuleCall_9() { return cStatementParserRuleCall_9; }

		//"/"?
		public Keyword getSolidusKeyword_10() { return cSolidusKeyword_10; }

		//Statement?
		public RuleCall getStatementParserRuleCall_11() { return cStatementParserRuleCall_11; }
	}

	public class VmStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VmStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleVmStatementTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexVmStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VmStatement returns ecore::EString:
		//  SimpleVmStatement|ComplexVmStatement;
		public ParserRule getRule() { return rule; }

		//SimpleVmStatement|ComplexVmStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleVmStatement
		public RuleCall getSimpleVmStatementTerminalRuleCall_0() { return cSimpleVmStatementTerminalRuleCall_0; }

		//ComplexVmStatement
		public RuleCall getComplexVmStatementParserRuleCall_1() { return cComplexVmStatementParserRuleCall_1; }
	}

	public class ComplexVmStatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexVmStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleVmStatementTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cVmEntryParserRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final RuleCall cQUOTEDSTRINGTerminalRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cSYMBOLSTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cSPACETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final RuleCall cVmEntryParserRuleCall_8_0 = (RuleCall)cAlternatives_8.eContents().get(0);
		private final RuleCall cQUOTEDSTRINGTerminalRuleCall_8_1 = (RuleCall)cAlternatives_8.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ComplexVmStatement returns ecore::EString:
		//  SimpleVmStatement SPACE? "(" SPACE? (VmEntry|QUOTEDSTRING) SPACE? SYMBOLS? SPACE? (
		//  VmEntry|QUOTEDSTRING)? SPACE? ")";
		public ParserRule getRule() { return rule; }

		//SimpleVmStatement SPACE? "(" SPACE? (VmEntry|QUOTEDSTRING) SPACE? SYMBOLS? SPACE? (
		//VmEntry|QUOTEDSTRING)? SPACE? ")"
		public Group getGroup() { return cGroup; }

		//SimpleVmStatement
		public RuleCall getSimpleVmStatementTerminalRuleCall_0() { return cSimpleVmStatementTerminalRuleCall_0; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_3() { return cSPACETerminalRuleCall_3; }

		//VmEntry|QUOTEDSTRING
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//VmEntry
		public RuleCall getVmEntryParserRuleCall_4_0() { return cVmEntryParserRuleCall_4_0; }

		//QUOTEDSTRING
		public RuleCall getQUOTEDSTRINGTerminalRuleCall_4_1() { return cQUOTEDSTRINGTerminalRuleCall_4_1; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_5() { return cSPACETerminalRuleCall_5; }

		//SYMBOLS?
		public RuleCall getSYMBOLSTerminalRuleCall_6() { return cSYMBOLSTerminalRuleCall_6; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_7() { return cSPACETerminalRuleCall_7; }

		//(VmEntry|QUOTEDSTRING)?
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//VmEntry
		public RuleCall getVmEntryParserRuleCall_8_0() { return cVmEntryParserRuleCall_8_0; }

		//QUOTEDSTRING
		public RuleCall getQUOTEDSTRINGTerminalRuleCall_8_1() { return cQUOTEDSTRINGTerminalRuleCall_8_1; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_9() { return cSPACETerminalRuleCall_9; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}

	public class VmEntryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VmEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleVmEntryTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBracedVmEntryTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VmEntry returns ecore::EString:
		//  SimpleVmEntry|BracedVmEntry;
		public ParserRule getRule() { return rule; }

		//SimpleVmEntry|BracedVmEntry
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleVmEntry
		public RuleCall getSimpleVmEntryTerminalRuleCall_0() { return cSimpleVmEntryTerminalRuleCall_0; }

		//BracedVmEntry
		public RuleCall getBracedVmEntryTerminalRuleCall_1() { return cBracedVmEntryTerminalRuleCall_1; }
	}

	public class StatementElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVmEntryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSTRTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cSTRTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cSTRTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cBracedVmEntryTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cSTRTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//Statement returns ecore::EString:
		//  (VmEntry|"\"" STR "\""|STR|STR? BracedVmEntry STR?)*;
		public ParserRule getRule() { return rule; }

		//(VmEntry|"\"" STR "\""|STR|STR? BracedVmEntry STR?)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//VmEntry
		public RuleCall getVmEntryParserRuleCall_0() { return cVmEntryParserRuleCall_0; }

		//"\"" STR "\""
		public Group getGroup_1() { return cGroup_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_1_0() { return cQuotationMarkKeyword_1_0; }

		//STR
		public RuleCall getSTRTerminalRuleCall_1_1() { return cSTRTerminalRuleCall_1_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_1_2() { return cQuotationMarkKeyword_1_2; }

		//STR
		public RuleCall getSTRTerminalRuleCall_2() { return cSTRTerminalRuleCall_2; }

		//STR? BracedVmEntry STR?
		public Group getGroup_3() { return cGroup_3; }

		//STR?
		public RuleCall getSTRTerminalRuleCall_3_0() { return cSTRTerminalRuleCall_3_0; }

		//BracedVmEntry
		public RuleCall getBracedVmEntryTerminalRuleCall_3_1() { return cBracedVmEntryTerminalRuleCall_3_1; }

		//STR?
		public RuleCall getSTRTerminalRuleCall_3_2() { return cSTRTerminalRuleCall_3_2; }
	}
	
	
	private MessageElements pMessage;
	private ComplexBeginningLineElements pComplexBeginningLine;
	private BeginningLineElements pBeginningLine;
	private LineElements pLine;
	private SimpleLineElements pSimpleLine;
	private ComplexLineElements pComplexLine;
	private VmStatementElements pVmStatement;
	private ComplexVmStatementElements pComplexVmStatement;
	private VmEntryElements pVmEntry;
	private StatementElements pStatement;
	private TerminalRule tQUOTEDSTRING;
	private TerminalRule tSTR;
	private TerminalRule tSYMBOLS;
	private TerminalRule tSimpleVmEntry;
	private TerminalRule tSimpleVmStatement;
	private TerminalRule tBracedVmEntry;
	private TerminalRule tSPACE;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public SwiftGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Message:
	//  elements+=( BeginningLine | ComplexBeginningLine )+ "{" STR ":\n" elements+=Line+ "-}";
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//ComplexBeginningLine returns ecore::EString:
	//  "{" STR ":" BeginningLine "}";
	public ComplexBeginningLineElements getComplexBeginningLineAccess() {
		return (pComplexBeginningLine != null) ? pComplexBeginningLine : (pComplexBeginningLine = new ComplexBeginningLineElements());
	}
	
	public ParserRule getComplexBeginningLineRule() {
		return getComplexBeginningLineAccess().getRule();
	}

	//BeginningLine returns ecore::EString:
	//  "{" STR ":" Statement "}";
	public BeginningLineElements getBeginningLineAccess() {
		return (pBeginningLine != null) ? pBeginningLine : (pBeginningLine = new BeginningLineElements());
	}
	
	public ParserRule getBeginningLineRule() {
		return getBeginningLineAccess().getRule();
	}

	//Line returns ecore::EString:
	//  (SimpleLine|ComplexLine|VmStatement) "\n"?;
	public LineElements getLineAccess() {
		return (pLine != null) ? pLine : (pLine = new LineElements());
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}

	//SimpleLine returns ecore::EString:
	//  ":" (VmEntry|STR) ":" (VmEntry|STR);
	public SimpleLineElements getSimpleLineAccess() {
		return (pSimpleLine != null) ? pSimpleLine : (pSimpleLine = new SimpleLineElements());
	}
	
	public ParserRule getSimpleLineRule() {
		return getSimpleLineAccess().getRule();
	}

	//ComplexLine returns ecore::EString:
	//  ":" (VmEntry|STR) "::" Statement "/" Statement? "/"? Statement? "/"? Statement? "/"?
	//  Statement?;
	public ComplexLineElements getComplexLineAccess() {
		return (pComplexLine != null) ? pComplexLine : (pComplexLine = new ComplexLineElements());
	}
	
	public ParserRule getComplexLineRule() {
		return getComplexLineAccess().getRule();
	}

	//VmStatement returns ecore::EString:
	//  SimpleVmStatement|ComplexVmStatement;
	public VmStatementElements getVmStatementAccess() {
		return (pVmStatement != null) ? pVmStatement : (pVmStatement = new VmStatementElements());
	}
	
	public ParserRule getVmStatementRule() {
		return getVmStatementAccess().getRule();
	}

	//ComplexVmStatement returns ecore::EString:
	//  SimpleVmStatement SPACE? "(" SPACE? (VmEntry|QUOTEDSTRING) SPACE? SYMBOLS? SPACE? (
	//  VmEntry|QUOTEDSTRING)? SPACE? ")";
	public ComplexVmStatementElements getComplexVmStatementAccess() {
		return (pComplexVmStatement != null) ? pComplexVmStatement : (pComplexVmStatement = new ComplexVmStatementElements());
	}
	
	public ParserRule getComplexVmStatementRule() {
		return getComplexVmStatementAccess().getRule();
	}

	//VmEntry returns ecore::EString:
	//  SimpleVmEntry|BracedVmEntry;
	public VmEntryElements getVmEntryAccess() {
		return (pVmEntry != null) ? pVmEntry : (pVmEntry = new VmEntryElements());
	}
	
	public ParserRule getVmEntryRule() {
		return getVmEntryAccess().getRule();
	}

	//Statement returns ecore::EString:
	//  (VmEntry|"\"" STR "\""|STR|STR? BracedVmEntry STR?)*;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//terminal QUOTEDSTRING:
	//  ("\"" | "\'") .* ("\"" | "\'");
	public TerminalRule getQUOTEDSTRINGRule() {
		return (tQUOTEDSTRING != null) ? tQUOTEDSTRING : (tQUOTEDSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUOTEDSTRING"));
	} 

	//terminal STR:
	//  ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getSTRRule() {
		return (tSTR != null) ? tSTR : (tSTR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STR"));
	} 

	//terminal SYMBOLS:
	//  ("=" | "-" | "_" | "+" | "<" | ">" | "!")*;
	public TerminalRule getSYMBOLSRule() {
		return (tSYMBOLS != null) ? tSYMBOLS : (tSYMBOLS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SYMBOLS"));
	} 

	//terminal SimpleVmEntry:
	//  "$" STR;
	public TerminalRule getSimpleVmEntryRule() {
		return (tSimpleVmEntry != null) ? tSimpleVmEntry : (tSimpleVmEntry = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleVmEntry"));
	} 

	//terminal SimpleVmStatement:
	//  "#" STR SPACE?;
	public TerminalRule getSimpleVmStatementRule() {
		return (tSimpleVmStatement != null) ? tSimpleVmStatement : (tSimpleVmStatement = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleVmStatement"));
	} 

	//terminal BracedVmEntry:
	//  "$" "{" STR "}";
	public TerminalRule getBracedVmEntryRule() {
		return (tBracedVmEntry != null) ? tBracedVmEntry : (tBracedVmEntry = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BracedVmEntry"));
	} 

	//terminal SPACE:
	//  " "; 
	//      
	//
	//
	////THis is necessary, otherwise we get a hang when an unknown character is entered into the editor.
	public TerminalRule getSPACERule() {
		return (tSPACE != null) ? tSPACE : (tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SPACE"));
	} 

	//terminal ANY_OTHER:
	//  .; 
	//
	//
	////THis is necessary, otherwise we get a hang when an unknown character is entered into the editor.
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
