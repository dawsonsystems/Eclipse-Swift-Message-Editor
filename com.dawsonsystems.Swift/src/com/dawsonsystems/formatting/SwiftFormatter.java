/*
 * generated by Xtext
 */
package com.dawsonsystems.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

import com.dawsonsystems.services.SwiftGrammarAccess;
import com.dawsonsystems.services.SwiftGrammarAccess.MessageElements;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class SwiftFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		
		SwiftGrammarAccess g = (SwiftGrammarAccess) getGrammarAccess();
		MessageElements gr = g.getMessageAccess();
		
		
		c.setLinewrap().between(g.getLineRule(), g.getLineRule());
		
		c.setNoSpace().around(g.getVmEntryRule());
		c.setNoSpace().around(g.getSTRRule());
		
		/*c.setLinewrap(3).after(f.getSimpleLineRule());
		c.setLinewrap(3).after(f.getComplexLineRule());
		
		c.setNoSpace().after(f.getVmEntryRule());
		c.setNoSpace().before(f.getVmEntryRule());*/
	}
}
